//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Flir.ServiceClient.PowerSupply {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PowerSupply", Namespace="http://schemas.datacontract.org/2004/07/Flir.Entities")]
    [System.SerializableAttribute()]
    public partial class PowerSupply : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ComPortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComPort {
            get {
                return this.ComPortField;
            }
            set {
                if ((object.ReferenceEquals(this.ComPortField, value) != true)) {
                    this.ComPortField = value;
                    this.RaisePropertyChanged("ComPort");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PowerSupply.IPowerSupplyService")]
    public interface IPowerSupplyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/GetCPowerSupplies", ReplyAction="http://tempuri.org/IPowerSupplyService/GetCPowerSuppliesResponse")]
        Flir.ServiceClient.PowerSupply.PowerSupply[] GetCPowerSupplies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/GetCPowerSupplies", ReplyAction="http://tempuri.org/IPowerSupplyService/GetCPowerSuppliesResponse")]
        System.Threading.Tasks.Task<Flir.ServiceClient.PowerSupply.PowerSupply[]> GetCPowerSuppliesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/GetVoltage", ReplyAction="http://tempuri.org/IPowerSupplyService/GetVoltageResponse")]
        float GetVoltage(int powerSupplyId, int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/GetVoltage", ReplyAction="http://tempuri.org/IPowerSupplyService/GetVoltageResponse")]
        System.Threading.Tasks.Task<float> GetVoltageAsync(int powerSupplyId, int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/GetCurrent", ReplyAction="http://tempuri.org/IPowerSupplyService/GetCurrentResponse")]
        float GetCurrent(int powerSupplyId, int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/GetCurrent", ReplyAction="http://tempuri.org/IPowerSupplyService/GetCurrentResponse")]
        System.Threading.Tasks.Task<float> GetCurrentAsync(int powerSupplyId, int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/ConnectToPowerSupply", ReplyAction="http://tempuri.org/IPowerSupplyService/ConnectToPowerSupplyResponse")]
        bool ConnectToPowerSupply(string comPort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/ConnectToPowerSupply", ReplyAction="http://tempuri.org/IPowerSupplyService/ConnectToPowerSupplyResponse")]
        System.Threading.Tasks.Task<bool> ConnectToPowerSupplyAsync(string comPort);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/DisconnectPowerSuppy", ReplyAction="http://tempuri.org/IPowerSupplyService/DisconnectPowerSuppyResponse")]
        bool DisconnectPowerSuppy(int powerSupplyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPowerSupplyService/DisconnectPowerSuppy", ReplyAction="http://tempuri.org/IPowerSupplyService/DisconnectPowerSuppyResponse")]
        System.Threading.Tasks.Task<bool> DisconnectPowerSuppyAsync(int powerSupplyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPowerSupplyServiceChannel : Flir.ServiceClient.PowerSupply.IPowerSupplyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PowerSupplyServiceClient : System.ServiceModel.ClientBase<Flir.ServiceClient.PowerSupply.IPowerSupplyService>, Flir.ServiceClient.PowerSupply.IPowerSupplyService {
        
        public PowerSupplyServiceClient() {
        }
        
        public PowerSupplyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PowerSupplyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PowerSupplyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PowerSupplyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Flir.ServiceClient.PowerSupply.PowerSupply[] GetCPowerSupplies() {
            return base.Channel.GetCPowerSupplies();
        }
        
        public System.Threading.Tasks.Task<Flir.ServiceClient.PowerSupply.PowerSupply[]> GetCPowerSuppliesAsync() {
            return base.Channel.GetCPowerSuppliesAsync();
        }
        
        public float GetVoltage(int powerSupplyId, int cameraId) {
            return base.Channel.GetVoltage(powerSupplyId, cameraId);
        }
        
        public System.Threading.Tasks.Task<float> GetVoltageAsync(int powerSupplyId, int cameraId) {
            return base.Channel.GetVoltageAsync(powerSupplyId, cameraId);
        }
        
        public float GetCurrent(int powerSupplyId, int cameraId) {
            return base.Channel.GetCurrent(powerSupplyId, cameraId);
        }
        
        public System.Threading.Tasks.Task<float> GetCurrentAsync(int powerSupplyId, int cameraId) {
            return base.Channel.GetCurrentAsync(powerSupplyId, cameraId);
        }
        
        public bool ConnectToPowerSupply(string comPort) {
            return base.Channel.ConnectToPowerSupply(comPort);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectToPowerSupplyAsync(string comPort) {
            return base.Channel.ConnectToPowerSupplyAsync(comPort);
        }
        
        public bool DisconnectPowerSuppy(int powerSupplyId) {
            return base.Channel.DisconnectPowerSuppy(powerSupplyId);
        }
        
        public System.Threading.Tasks.Task<bool> DisconnectPowerSuppyAsync(int powerSupplyId) {
            return base.Channel.DisconnectPowerSuppyAsync(powerSupplyId);
        }
    }
}
