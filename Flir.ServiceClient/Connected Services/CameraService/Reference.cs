//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Flir.ServiceClient.CameraService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Camera", Namespace="http://schemas.datacontract.org/2004/07/Flir.Entities")]
    [System.SerializableAttribute()]
    public partial class Camera : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateLastTestedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> QcPassedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateLastTested {
            get {
                return this.DateLastTestedField;
            }
            set {
                if ((this.DateLastTestedField.Equals(value) != true)) {
                    this.DateLastTestedField = value;
                    this.RaisePropertyChanged("DateLastTested");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> QcPassed {
            get {
                return this.QcPassedField;
            }
            set {
                if ((this.QcPassedField.Equals(value) != true)) {
                    this.QcPassedField = value;
                    this.RaisePropertyChanged("QcPassed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CameraService.ICameraService")]
    public interface ICameraService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/GetCameras", ReplyAction="http://tempuri.org/ICameraService/GetCamerasResponse")]
        Flir.ServiceClient.CameraService.Camera[] GetCameras();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/GetCameras", ReplyAction="http://tempuri.org/ICameraService/GetCamerasResponse")]
        System.Threading.Tasks.Task<Flir.ServiceClient.CameraService.Camera[]> GetCamerasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/ConnectToCamera", ReplyAction="http://tempuri.org/ICameraService/ConnectToCameraResponse")]
        bool ConnectToCamera(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/ConnectToCamera", ReplyAction="http://tempuri.org/ICameraService/ConnectToCameraResponse")]
        System.Threading.Tasks.Task<bool> ConnectToCameraAsync(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StartStreaming", ReplyAction="http://tempuri.org/ICameraService/StartStreamingResponse")]
        bool StartStreaming(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StartStreaming", ReplyAction="http://tempuri.org/ICameraService/StartStreamingResponse")]
        System.Threading.Tasks.Task<bool> StartStreamingAsync(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StopStreaming", ReplyAction="http://tempuri.org/ICameraService/StopStreamingResponse")]
        bool StopStreaming(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/StopStreaming", ReplyAction="http://tempuri.org/ICameraService/StopStreamingResponse")]
        System.Threading.Tasks.Task<bool> StopStreamingAsync(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/DisconnectCamera", ReplyAction="http://tempuri.org/ICameraService/DisconnectCameraResponse")]
        bool DisconnectCamera(int cameraId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICameraService/DisconnectCamera", ReplyAction="http://tempuri.org/ICameraService/DisconnectCameraResponse")]
        System.Threading.Tasks.Task<bool> DisconnectCameraAsync(int cameraId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICameraServiceChannel : Flir.ServiceClient.CameraService.ICameraService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CameraServiceClient : System.ServiceModel.ClientBase<Flir.ServiceClient.CameraService.ICameraService>, Flir.ServiceClient.CameraService.ICameraService {
        
        public CameraServiceClient() {
        }
        
        public CameraServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CameraServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CameraServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Flir.ServiceClient.CameraService.Camera[] GetCameras() {
            return base.Channel.GetCameras();
        }
        
        public System.Threading.Tasks.Task<Flir.ServiceClient.CameraService.Camera[]> GetCamerasAsync() {
            return base.Channel.GetCamerasAsync();
        }
        
        public bool ConnectToCamera(int cameraId) {
            return base.Channel.ConnectToCamera(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectToCameraAsync(int cameraId) {
            return base.Channel.ConnectToCameraAsync(cameraId);
        }
        
        public bool StartStreaming(int cameraId) {
            return base.Channel.StartStreaming(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> StartStreamingAsync(int cameraId) {
            return base.Channel.StartStreamingAsync(cameraId);
        }
        
        public bool StopStreaming(int cameraId) {
            return base.Channel.StopStreaming(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> StopStreamingAsync(int cameraId) {
            return base.Channel.StopStreamingAsync(cameraId);
        }
        
        public bool DisconnectCamera(int cameraId) {
            return base.Channel.DisconnectCamera(cameraId);
        }
        
        public System.Threading.Tasks.Task<bool> DisconnectCameraAsync(int cameraId) {
            return base.Channel.DisconnectCameraAsync(cameraId);
        }
    }
}
